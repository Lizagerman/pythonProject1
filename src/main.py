import json
import csv
import openpyxl
from datetime import datetime
from typing import List, Dict, Any, Optional

from src.transaction import search_transactions_by_description


def main():
    print("–ü—Ä–∏–≤–µ—Ç, Liza! –ü—Ä–æ–µ–∫—Ç –∂–∏–≤ üëã")


if __name__ == "__main__":
    main()


# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# (load_transactions_from_json, load_transactions_from_csv,
# load_transactions_from_xlsx, filter_by_status,
# sort_transactions_by_date,
# filter_by_currency, format_transaction) —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
# –∏–ª–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
# —Ç–æ–±–æ–π. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —è –º–æ–≥—É –¥–∞—Ç—å –∏—Ö –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.


# –ó–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ main
def load_transactions_from_json(filepath: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç –≤ —Ñ–∞–π–ª–µ {filepath}.")
        return []


def load_transactions_from_csv(filepath: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞."""
    transactions: List[Dict[str, Any]] = []
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                transactions.append(dict(row))
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
    return transactions


def load_transactions_from_xlsx(filepath: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ XLSX —Ñ–∞–π–ª–∞."""
    transactions: List[Dict[str, Any]] = []
    try:
        workbook = openpyxl.load_workbook(filepath)
        sheet = workbook.active
        headers = [cell.value for cell in sheet[1]]
        for row_idx in range(2, sheet.max_row + 1):
            transaction = {}
            for col_idx, header in enumerate(headers):
                transaction[header] = sheet.cell(row=row_idx, column=col_idx + 1).value
            transactions.append(transaction)
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ XLSX —Ñ–∞–π–ª–∞: {e}")
    return transactions


def filter_by_status(
    transactions: List[Dict[str, Any]], status: str
) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É."""
    return [t for t in transactions if t.get("state", "").lower() == status.lower()]


def sort_transactions_by_date(
    transactions: List[Dict[str, Any]], ascending: bool = True
) -> List[Dict[str, Any]]:
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ."""
    try:
        return sorted(
            transactions,
            key=lambda x: datetime.strptime(x.get("date", ""), "%Y-%m-%dT%H:%M:%S.%f"),
            reverse=not ascending,
        )
    except (ValueError, TypeError):
        return transactions  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–∞—Ç—ã


def filter_by_currency(
    transactions: List[Dict[str, Any]], currency_code: str = "RUB"
) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–µ."""
    return [
        t
        for t in transactions
        if t.get("operationAmount", {}).get("currency", {}).get("code", "").upper()
        == currency_code.upper()
    ]


def format_transaction(transaction: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    date_str = ""
    try:
        date_obj = datetime.strptime(
            transaction.get("date", ""), "%Y-%m-%dT%H:%M:%S.%f"
        )
        date_str = date_obj.strftime("%d.%m.%Y")
    except (ValueError, TypeError):
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã

    description = transaction.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    amount = transaction.get("operationAmount", {}).get("amount", "N/A")
    currency = (
        transaction.get("operationAmount", {}).get("currency", {}).get("name", "")
    )

    from_account = transaction.get("from", "")
    to_account = transaction.get("to", "")

    # –û–±—Ä–µ–∑–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
    if from_account:
        if len(from_account) > 4:
            from_account = (
                f"{from_account[:-10]} **{from_account[-4:]}"  # –ü—Ä–∏–º–µ—Ä –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            )
        else:
            from_account = f"–°—á–µ—Ç **{from_account[-4:]}"  # –ü—Ä–∏–º–µ—Ä –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
    if to_account:
        if len(to_account) > 4:
            to_account = f"{to_account[:-10]} **{to_account[-4:]}"  # –ü—Ä–∏–º–µ—Ä –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        else:
            to_account = f"–°—á–µ—Ç **{to_account[-4:]}"  # –ü—Ä–∏–º–µ—Ä –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏

    # –ï—Å–ª–∏ –µ—Å—Ç—å "from" –∏ "to"
    if from_account and to_account:
        accounts_info = f"{from_account} -> {to_account}"
    elif to_account:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ "to"
        accounts_info = to_account
    else:
        accounts_info = ""  # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö

    return (
        f"{date_str} {description}\n"
        f"{accounts_info}\n"
        f"–°—É–º–º–∞: {amount} {currency}\n"
    )


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã
    —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    print("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.")
    transactions: List[Dict[str, Any]] = []

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞")
        print("2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ CSV-—Ñ–∞–π–ª–∞")
        print("3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ XLSX-—Ñ–∞–π–ª–∞")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")

        if choice == "1":
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞: –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω JSON-—Ñ–∞–π–ª.")
            filepath = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, operations.json): ")
            transactions = load_transactions_from_json(filepath)
            if not transactions:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                continue
            break
        elif choice == "2":
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞: –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω CSV-—Ñ–∞–π–ª.")
            filepath = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, operations.csv): ")
            transactions = load_transactions_from_csv(filepath)
            if not transactions:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                continue
            break
        elif choice == "3":
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞: –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω XLSX-—Ñ–∞–π–ª.")
            filepath = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ XLSX —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, operations.xlsx): ")
            transactions = load_transactions_from_xlsx(filepath)
            if not transactions:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                continue
            break
        elif choice == "0":
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        else:
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 0.")

    filtered_transactions = list(
        transactions
    )  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    available_statuses = ["EXECUTED", "CANCELED", "PENDING"]
    while True:
        status_input = input(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. "
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å—ã: {', '.join(available_statuses)}\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
        )
        if status_input.upper() in available_statuses:
            filtered_transactions = filter_by_status(
                filtered_transactions, status_input
            )
            print(
                f'–ü—Ä–æ–≥—Ä–∞–º–º–∞: –û–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É "{status_input.upper()}"'
            )
            break
        else:
            print(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞: –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ "{status_input}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    sort_by_date_input = input(
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ? –î–∞/–ù–µ—Ç\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
    )
    if sort_by_date_input.lower() == "–¥–∞":
        while True:
            sort_order_input = input(
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é "
                "–∏–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é?\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
            )
            if sort_order_input.lower() == "–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é":
                filtered_transactions = sort_transactions_by_date(
                    filtered_transactions, ascending=True
                )
                break
            elif sort_order_input.lower() == "–ø–æ —É–±—ã–≤–∞–Ω–∏—é":
                filtered_transactions = sort_transactions_by_date(
                    filtered_transactions, ascending=False
                )
                break
            else:
                print(
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                    "–≤–≤–µ–¥–∏—Ç–µ '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' –∏–ª–∏ '–ø–æ —É–±—ã–≤–∞–Ω–∏—é'."
                )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä—É–±–ª–µ–≤—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    rub_only_input = input(
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –í—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É–±–ª–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏? –î–∞/–ù–µ—Ç\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
    )
    if rub_only_input.lower() == "–¥–∞":
        filtered_transactions = filter_by_currency(filtered_transactions, "RUB")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    filter_by_description_input = input(
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π "
        "–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–ª–æ–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏? –î–∞/–ù–µ—Ç\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
    )
    if filter_by_description_input.lower() == "–¥–∞":
        search_term = input(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "
        )
        filtered_transactions = search_transactions_by_description(
            filtered_transactions, search_term
        )

    print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞: –†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—é –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

    if not filtered_transactions:
        print(
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, "
            "–ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–æ–¥ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
        )
    else:
        print(f"\n–í—Å–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –≤—ã–±–æ—Ä–∫–µ: {len(filtered_transactions)}\n")
        for transaction in filtered_transactions:
            print(format_transaction(transaction))


if __name__ == "__main__":
    main()

